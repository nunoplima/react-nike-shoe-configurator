/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/nike_air_jordan.glb
Author: Ar41k (https://sketchfab.com/ar41k)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/nike-air-jordan-fd462c530d974f33a523d88a7562f1cf
Title: Nike Air Jordan
*/

import { animated } from '@react-spring/three'
import { useGLTF } from '@react-three/drei'
import { ThreeEvent } from '@react-three/fiber'
import {
  FC,
  PropsWithChildren,
  startTransition,
  useCallback,
  useDeferredValue,
  useEffect,
  useMemo,
  useRef,
} from 'react'
import useCameraControlsContext from '../../context/useCameraControlsContext'
import { EColors, ESides, ESteps } from '../../enums'
import { useAnimatedColorsPerStep } from '../../hooks/useAnimatedColorsPerStep'
import { useTextures } from '../../hooks/useTextures'
import useCustomizationStore from '../../store/customizationStore'
import {
  FIRST_STEP_CAMERA_POSITION,
  STEPS,
} from '../../store/customizationStore/useCustomizationStore.contants'

export const Shoe: FC<PropsWithChildren> = (props) => {
  const cameraControlsRef = useCameraControlsContext()?.cameraControlsRef

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const shoeRef = useRef<any | null>(null)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const { nodes, materials }: { nodes: any; materials: any } = useGLTF(
    './models/air-jordans.gltf',
  )

  const steps = useCustomizationStore((state) => state.steps)
  const goToStep = useCustomizationStore((state) => state.goToStep)

  const {
    bodyColor,
    mudguardColor,
    tongueColor,
    lacesColor,
    eyestayColor,
    swooshColor,
    heelColor,
    airLogoColor,
    upperSoleColor,
    soleColor,
  } = useAnimatedColorsPerStep()

  const textures = useTextures()

  useEffect(() => {
    if (!shoeRef.current || !cameraControlsRef?.current) return

    // on mount rotate the camera to the first step position
    // timout prevents sharp position change
    const timeout = setTimeout(() => {
      const [x, y, z] = FIRST_STEP_CAMERA_POSITION
      cameraControlsRef.current?.setPosition(x, y, z, true)
    }, 20)

    return () => clearTimeout(timeout)
  }, [cameraControlsRef])

  const mudguardTexture = useDeferredValue(
    textures[steps[ESteps.mudguard].selectedTexture],
  )
  const tongueTexture = useDeferredValue(
    textures[steps[ESteps.tongue].selectedTexture],
  )
  const eyestayTexture = useDeferredValue(
    textures[steps[ESteps.eyestay].selectedTexture],
  )
  const swooshTexture = useDeferredValue(
    textures[steps[ESteps.swoosh].selectedTexture],
  )
  const heelTexture = useDeferredValue(
    textures[steps[ESteps.heel].selectedTexture],
  )

  const handleGoToStep = useCallback(
    (step: ESteps, side: ESides = ESides.right) =>
      (event: ThreeEvent<MouseEvent>) => {
        // stop propagation
        event.stopPropagation()

        // bail out if there is dragging
        // check: https://github.com/pmndrs/react-three-fiber/issues/691
        if (event.delta > 0 || !cameraControlsRef?.current) return

        startTransition(() => goToStep(step))

        // look at the new step meshes
        const [camX, camY, camZ] = STEPS[step].lookAtPos[side]
        cameraControlsRef.current.setPosition(camX, camY, camZ, true)
      },
    [cameraControlsRef, goToStep],
  )

  const renderBackTopInnerMesh = useMemo(
    () => (
      <mesh
        geometry={nodes.Object_44.geometry}
        material={materials['Main.029']}
        position={[-0.027, 1.026, 1.086]}
        rotation={[Math.PI, -0.263, Math.PI]}
        material-color={EColors.sanddrift}
      />
    ),
    [materials, nodes],
  )

  const renderHeelMeshes = useMemo(
    () => (
      <>
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials['Main.021']}
          position={[0.35, -0.465, 1.023]}
          rotation={[-Math.PI, 0, -Math.PI]}
          onClick={handleGoToStep(ESteps.heel)}
        >
          <animated.meshStandardMaterial {...heelTexture} color={heelColor} />
        </mesh>
        {/* swoosh square */}
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials['Main.021']}
          position={[0.677, 0.202, 0.985]}
          rotation={[1.555, 0.066, Math.PI / 2]}
        >
          <animated.meshStandardMaterial {...heelTexture} color={heelColor} />
        </mesh>
        {/* top */}
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials['Main.021']}
          position={[-0.077, 0.527, 1.102]}
          rotation={[0, -1.571, 0]}
          onClick={handleGoToStep(ESteps.airLogo)}
        >
          <animated.meshStandardMaterial {...heelTexture} color={heelColor} />
        </mesh>
      </>
    ),
    [handleGoToStep, heelColor, heelTexture, materials, nodes],
  )

  const renderAirJordanLogoMesh = useCallback(
    (side: ESides = ESides.right) => (
      <animated.mesh
        geometry={nodes.Object_28.geometry}
        material={materials['Main.031']}
        position={[-0.098, 0.51, 1.739]}
        rotation={[0.11, 0.21, -0.359]}
        material-color={airLogoColor}
        castShadow
        onClick={handleGoToStep(ESteps.airLogo, side)}
      />
    ),
    [airLogoColor, handleGoToStep, materials, nodes],
  )

  const renderBodyMeshes = useCallback(
    (side: ESides = ESides.right) => (
      <>
        {/* body main */}
        <animated.mesh
          geometry={nodes.Object_12.geometry}
          material={materials['Main.008']}
          position={[-0.509, -0.231, 1.185]}
          rotation={[Math.PI, -0.343, Math.PI]}
          material-color={bodyColor}
          onClick={handleGoToStep(ESteps.body, side)}
        />
        {/* front body */}
        <mesh
          geometry={nodes.Object_20.geometry}
          material={materials['Main.008']}
          position={[-2.606, -0.469, 1.214]}
          rotation={[0, -1.571, 0]}
          receiveShadow
          onClick={handleGoToStep(ESteps.body, side)}
        />
        {/* center body */}
        <mesh
          geometry={nodes.Object_22.geometry}
          material={materials['Main.008']}
          position={[-0.363, 0.238, 1.113]}
          rotation={[Math.PI, -0.343, Math.PI]}
          onClick={handleGoToStep(ESteps.body, side)}
        />
        {/* top body*/}
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials['Main.008']}
          position={[0.09, 0.86, 1.074]}
          rotation={[Math.PI, -0.263, Math.PI]}
        />
      </>
    ),
    [bodyColor, handleGoToStep, materials, nodes],
  )

  const renderTongueMeshes = useCallback(
    (side: ESides = ESides.right) => (
      <>
        {/* tongue */}
        <mesh
          geometry={nodes.Object_42.geometry}
          material={materials['Main.001']}
          position={[-0.952, 0.44, 1.227]}
          rotation={[Math.PI / 2, -1.019, Math.PI / 2]}
          receiveShadow
          onClick={handleGoToStep(ESteps.tongue)}
        >
          <animated.meshStandardMaterial
            {...tongueTexture}
            color={tongueColor}
          />
        </mesh>
        {/* behind nike tongue logo */}
        <mesh
          geometry={nodes.Object_24.geometry}
          material={materials.Main}
          position={[-0.654, 1.025, 1.161]}
          rotation={[Math.PI / 2, -1.019, Math.PI / 2]}
        >
          <animated.meshStandardMaterial
            {...tongueTexture}
            color={tongueColor}
          />
        </mesh>
        {/* tongue nike logo */}
        {side === ESides.right ? (
          <mesh
            geometry={nodes.Object_26.geometry}
            material={materials['Main.007']}
            position={[-0.709, 1.263, 1.21]}
            rotation={[1.6, -0.914, 1.601]}
            castShadow
          />
        ) : (
          <group
            position={[-0.709, 1.263, 1.21]}
            rotation={[1.6, -0.914, 1.601]}
          >
            <mesh
              geometry={nodes.Object_26001.geometry}
              material={materials['Main.006']}
              rotation={[3.075, -0.11, 0.125]}
              scale={-1}
              castShadow
            />
          </group>
        )}
      </>
    ),
    [handleGoToStep, materials, nodes, tongueColor, tongueTexture],
  )

  const renderEyestayMeshes = useMemo(
    () => (
      <>
        {/* eyestay top */}
        <mesh
          geometry={nodes.Object_32.geometry}
          material={materials['Main.015']}
          position={[-0.982, 0.385, 1.193]}
          rotation={[Math.PI / 2, 0.595, -Math.PI]}
          castShadow
          receiveShadow
          onClick={handleGoToStep(ESteps.eyestay)}
        >
          <animated.meshStandardMaterial
            {...eyestayTexture}
            color={eyestayColor}
          />
        </mesh>
        {/* eyestay bottom */}
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials['Main.015']}
          position={[-1.828, -0.393, 1.304]}
          rotation={[Math.PI / 2, 0, -Math.PI]}
          castShadow
          receiveShadow
          onClick={handleGoToStep(ESteps.eyestay)}
        >
          <animated.meshStandardMaterial
            {...eyestayTexture}
            color={eyestayColor}
          />
        </mesh>
      </>
    ),
    [eyestayColor, eyestayTexture, handleGoToStep, materials, nodes],
  )

  const renderMudguardMesh = useCallback(
    (side: ESides = ESides.right) => (
      <mesh
        geometry={nodes.Object_18.geometry}
        material={materials['Main.009']}
        position={[-2.588, -0.701, 1.204]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
        receiveShadow
        onClick={handleGoToStep(ESteps.mudguard, side)}
      >
        <animated.meshStandardMaterial
          {...mudguardTexture}
          color={mudguardColor}
        />
      </mesh>
    ),
    [handleGoToStep, materials, mudguardColor, mudguardTexture, nodes],
  )

  const renderSwooshMesh = useCallback(
    (side: ESides = ESides.right) => (
      <mesh
        geometry={nodes.Object_34.geometry}
        material={materials['Main.019']}
        position={[-0.194, -0.155, 1.081]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
        onClick={handleGoToStep(ESteps.swoosh, side)}
      >
        <animated.meshStandardMaterial {...swooshTexture} color={swooshColor} />
      </mesh>
    ),
    [handleGoToStep, materials, nodes, swooshColor, swooshTexture],
  )

  const renderLacesMesh = useMemo(
    () => (
      <mesh
        geometry={nodes.Object_40.geometry}
        material={materials['Main.016']}
        position={[-1.373, 0.202, 1.214]}
        rotation={[-Math.PI, 1.562, -Math.PI]}
        castShadow
        receiveShadow
        onClick={handleGoToStep(ESteps.laces)}
      >
        <animated.meshStandardMaterial
          {...textures.rope}
          displacementScale={0.02}
          color={lacesColor}
        />
      </mesh>
    ),
    [handleGoToStep, lacesColor, materials, nodes, textures.rope],
  )

  const renderUpperSoleMeshes = useMemo(
    () => (
      <>
        {/* top sole */}
        <animated.mesh
          geometry={nodes.Object_48.geometry}
          material={materials['Main.011']}
          position={[-1.202, -0.931, 1.126]}
          rotation={[0, -1.571, 0]}
          castShadow
          onClick={handleGoToStep(ESteps.upperSole)}
          material-color={upperSoleColor}
        />
        {/* top sole thread */}
        <mesh
          geometry={nodes.Object_38.geometry}
          material={materials['Main.011']}
          position={[-1.343, -0.908, 1.16]}
          rotation={[-1.571, -0.024, -1.571]}
          scale={0.04}
          castShadow
        />
      </>
    ),
    [handleGoToStep, materials, nodes, upperSoleColor],
  )

  const renderSoleMeshes = useMemo(
    () => (
      <>
        {/* sole circle */}
        <animated.mesh
          geometry={nodes.Object_14.geometry}
          material={materials.Main}
          position={[-2.289, -1.256, 0.921]}
          rotation={[Math.PI / 2, 0, -2.052]}
          material-color={soleColor}
          castShadow
          onClick={handleGoToStep(ESteps.sole)}
        >
          <animated.meshStandardMaterial color={soleColor} />
        </animated.mesh>
        {/* sole */}
        <animated.mesh
          geometry={nodes.Object_46.geometry}
          material={materials.Main}
          position={[-2.325, -1.228, 1.159]}
          rotation={[Math.PI / 2, 0, -2.052]}
          castShadow
        >
          <animated.meshStandardMaterial color={soleColor} />
        </animated.mesh>
        {/* sole */}
        <animated.mesh
          geometry={nodes.Object_50.geometry}
          material={materials.Main}
          position={[-1.278, -1.193, 1.176]}
          rotation={[Math.PI / 2, 0, -2.052]}
          castShadow
        >
          <animated.meshStandardMaterial color={soleColor} />
        </animated.mesh>
        {/* sole */}
        <animated.mesh
          geometry={nodes.Object_30.geometry}
          material={materials.Main}
          position={[-1.355, -1.233, 1.137]}
          rotation={[Math.PI / 2, 0, -2.052]}
          castShadow
        >
          <animated.meshStandardMaterial color={soleColor} />
        </animated.mesh>
        {/* sole logo */}
        <animated.mesh
          geometry={nodes.Object_36.geometry}
          material={materials.Main}
          position={[-1.131, -1.255, 1.283]}
          rotation={[Math.PI / 2, 0, -2.052]}
        >
          <animated.meshStandardMaterial color={soleColor} />
        </animated.mesh>
      </>
    ),
    [handleGoToStep, materials, nodes, soleColor],
  )

  return (
    <group
      {...props}
      ref={shoeRef}
      position={[1.2, 1.7, 0]}
      scale={[1.05, 1, 1]}
    >
      {/* RIGHT SHOE */}
      <group rotation={[-Math.PI / 2, -0.136, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          {renderBackTopInnerMesh}
          {renderHeelMeshes}
          {renderAirJordanLogoMesh()}
          {renderBodyMeshes()}
          {renderTongueMeshes()}
          {renderEyestayMeshes}
          {renderMudguardMesh()}
          {renderSwooshMesh()}
          {renderLacesMesh}
          {renderUpperSoleMeshes}
          {renderSoleMeshes}
        </group>
      </group>

      {/* LEFT SHOE */}
      <group
        position={[-0.002, 0.025, 0.001]}
        rotation={[Math.PI / 2, 0.136, Math.PI]}
        scale={-1}
      >
        <group rotation={[Math.PI / 2, 0, 0]}>
          {renderBackTopInnerMesh}
          {renderHeelMeshes}
          {renderAirJordanLogoMesh(ESides.left)}
          {renderBodyMeshes(ESides.left)}
          {renderTongueMeshes(ESides.left)}
          {renderEyestayMeshes}
          {renderMudguardMesh(ESides.left)}
          {renderSwooshMesh(ESides.left)}
          {renderLacesMesh}
          {renderUpperSoleMeshes}
          {renderSoleMeshes}
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/air-jordans.gltf')
